class Branch
{

 
  public:
 
  int Id,UEx[4],CurPth,nextPth;
  bool Bk, Lt, Ft, Rt,XBk, XLt, XFt, XRt,BValid;
  String turn,x[4][4] = {{"u","l","s","r"}, {"r","u","l","s"},{"s","r","u","l"}, {"l","s","r","u"}};
  String type;
  Branch()
    {
        ResetBrnc();   
      }
      void ResetBrnc()
      {
        Id=-1;
        Bk=false;
        Lt=false;
        Ft=false;
        Rt=false;
        XBk=true;
        XLt=false;
        XFt=false;
        XRt=false;
        BValid=true;
        CurPth=0;
        turn=x[0][0];
        }
      void setBtype(bool bBk, bool bLt,bool bRt, bool bFt)
      {
       
        Bk=bBk;
        Lt=bLt;
        Ft=bFt;
        Rt=bRt;        
        }
     
      void setB(int bId,String incomingByte)
      {
        type=incomingByte;
        Id=bId;
        if (incomingByte=="A")
        {      
        setBtype(true,true,true,false);
        }
        else if (incomingByte=="B")
        {
        setBtype(true,true,false,true); //Serial3.println(" BB");
        }
        else if (incomingByte=="C")
        {
        setBtype(true,true,true,true); //Serial3.println(" CC");
        }
        else if (incomingByte=="D")
        {
        setBtype(true,false,true,true); //Serial3.println(" DD");
        }
        else if (incomingByte=="U")
        {
        setBtype(true,false,false,false);  //Serial3.println(" EE");
        }    
      }
      String WchWay()
      {
        for (int i=CurPth;i<4;i++)
        {
         
          if ((CurPth<1)&&(XLt==false)&&Lt)
          {        
            nextPth=1;
            XLt=true;          
            }
           else if ((CurPth<2)&&(XFt==false)&&Ft)        
           {
            nextPth=2;          
            XFt=true;
            }
            else if ((CurPth<3)&&(XRt==false)&&Rt)        
            {
              nextPth=3;
              XRt=true;
              }
            else      
            {
              nextPth=0;            
              BValid=false;              
            }
            turn=x[0][nextPth];
            return x[CurPth][nextPth];
                   
          }
       
        }
  };
#define sl8  A15  
#define sl7  A14  
#define sl6  A13  
#define sl5  A12  
#define sl4  A11  
#define sl3  A10  
#define sl2  A9  
#define sl1  A8
#define sr1  A7
#define sr2  A6  
#define sr3  A5  
#define sr4  A4  
#define sr5  A3  
#define sr6  A2  
#define sr7  A1  
#define sr8  A0
#define L1  45
#define L2  39  
#define L3  31  
#define encoderRPinA  18
#define encoderRPinB  19
#define encoderLPinA  20
#define encoderLPinB  21

int speed1=120;
int speed2=90;
int speed3=150;//150
int speed4=100;
int desr;
int desl;
int rightdes;
int rightbackdes;
int leftdes;
int leftbackdes;
int desU;
int desrightback;
int desT;
volatile signed long encoderRPos = 0;
volatile signed long enoderRPosUnSign = 0;
volatile signed long encoderLPos = 0;
volatile signed long encoderLPosUnSign = 0;

//bool SArr[8];
#define LM1 7  
#define LM2 6    
#define RM1 8  
#define RM2 9  
#define ENl 5    // ENABLE
#define ENr 10     // ENABLE
bool BotStart=1, brk=0;
void setup()
{
 
 blinkLED(1,1,1,2000);
 blinkLED(1,1,1,4);
 blinkLED(0,0,1,5);
  String c="SETUP";
  delay(2000); 
  pinMode(sl1, INPUT);
  pinMode(sl2, INPUT);
  pinMode(sl3, INPUT);
  pinMode(sl4, INPUT);
  pinMode(sl5, INPUT);
  pinMode(sl6, INPUT);
  pinMode(sl7, INPUT);
  pinMode(sl8, INPUT);
  pinMode(sr1, INPUT);
  pinMode(sr2, INPUT);
  pinMode(sr3, INPUT);
  pinMode(sr4, INPUT);
  pinMode(sr5, INPUT);
  pinMode(sr6, INPUT);
  pinMode(sr7, INPUT);
  pinMode(sr8, INPUT);
  pinMode(LM1, OUTPUT);
  pinMode(LM2, OUTPUT);
  pinMode(RM1, OUTPUT);
  pinMode(RM2, OUTPUT);
  pinMode(ENl, OUTPUT);
  pinMode(ENr, OUTPUT);
  pinMode(L1, OUTPUT);
  pinMode(L2, OUTPUT);
  pinMode(L3, OUTPUT);
  pinMode(L1-1, OUTPUT);
  pinMode(L2-1, OUTPUT);
  pinMode(L3-1, OUTPUT);
  pinMode(13, OUTPUT);
  Serial3.begin (9600);
  delay(200);
  Serial3.println("Begin Setup");
  digitalWrite(13,LOW);
   AlignTheBot();
    pinMode(encoderRPinA, INPUT);
  digitalWrite(encoderRPinA, HIGH);       // turn on pull-up resistor
  pinMode(encoderRPinB, INPUT);
  digitalWrite(encoderRPinB, HIGH);       // turn on pull-up resistor

  pinMode(encoderLPinA, INPUT);
  digitalWrite(encoderLPinA, HIGH);       // turn on pull-up resistor
  pinMode(encoderLPinB, INPUT);
  digitalWrite(encoderLPinB, HIGH);       // turn on pull-up resistor
 
  attachInterrupt(digitalPinToInterrupt(encoderRPinA), doencoderRA, CHANGE);  // encoder pin on interrupt 0 - pin 2
  attachInterrupt(digitalPinToInterrupt(encoderRPinB), doencoderRB, CHANGE);  // encoder pin on interrupt 0 - pin 2
  attachInterrupt(digitalPinToInterrupt(encoderLPinB), doencoderLB, CHANGE);  // encoder pin on interrupt 0 - pin 2
  attachInterrupt(digitalPinToInterrupt(encoderLPinA), doencoderLA, CHANGE);
  Serial3.begin (9600);
}
//* Temp

const int MaxBrch=20;
bool Juncn=0;
bool EmergStop=0;
bool mot = 1;
float err=0;
int PK,PF; //(~(PINF|B00000001)||~(PINK|B10000000))//(R||L)
int cnt=0;
int diffA[16];


float wtgL[]={0.5,1.8,2,3,4,5,6,7};
float wtgR[]={-7,-6,-5,-4,-3,-2,-1.8,-0.5};
String JunctionName[2][2][2]={
                              {
                                {"U","R"},
                                {"L","A"}
                               },
                              {
                                {"S","D"},
                                {"B","C"}
                               }
                            };
struct paths
  {
    int V;
    int C0;
    int C1;
    int C2;
    int PF;
    int PK;
    int maxT;
  };

int Bid=0;
String BType,path;
int CntBrn=0;
Branch B[MaxBrch];
char mode='S';
int CD= 0;//{N,E,S,W}
int TurnDir=0;//{F,L,R,U}
int DTmat[4][4]={{0,1,2,3},{3,0,1,2},{1,2,3,0},{2,3,0,1}};
bool match=1;

void loop()
{
if (match)
{
  Juncn=0;
BType=checkforJ();
String nextTurn;//,Dir[4]={'B','L','R','S'};  
char incomingByte[10];


if (mode=='S')
{
  if(BType=="A"||BType=="B"||BType=="C"||BType=="D"||BType=="U")
  {

 
    if (B[Bid].Id<0)
    {
      B[Bid].setB(Bid,BType);
    }
    else
   
    {
      for(int j=Bid+1;j<=CntBrn;j++)
      {
        B[j].ResetBrnc();
      }
    }

      nextTurn=B[Bid].WchWay();
      TurnbotMain(nextTurn);
 
      B[Bid].CurPth=B[Bid].nextPth;
      if (B[Bid].BValid)
      {      
        Bid++;
        CntBrn=Bid;
      }
      else
      {
         Bid--;
      }
   
    path="";      
    for(int k=0;k<CntBrn;k++)
      {
        path+=B[k].turn;
      path+="-";
      }
      Juncn=0;
    }
  else if   (BType=="L"||BType=="R")
  {

         if(BType=="R")
         {
          nextTurn="r";
          TurnbotMain(nextTurn);
        }
         else if(BType=="L")
         {
          nextTurn="l";
          TurnbotMain(nextTurn);
         } 
        path="";      
        for(int k=0;k<CntBrn;k++)
          {
            path+=B[k].turn;
          path+="-";
          }
           Serial3.println("path");
          Serial3.println(path);
   
  }
  else if(BType=="E")
  {
    Serial3.println("Dry run completed");
    mode='R';
    blinkLED(1,1,1,2000);
    blinkLED(0,1,1,2000);
    blinkLED(0,0,1,2000);
    blinkLED(1,1,1,5);
    Bid=0;
    Serial3.println("Main run");
    }
}
else if(mode=='R')
{
  if(BType=="A"||BType=="B"||BType=="C"||BType=="D"||BType=="U")
  {
    Serial3.print("turn :");
    Serial3.println(B[Bid].turn);
          SetDrivPinHalt();
         delay(300);        //2000
         Serial3.print("navin r");
         encoderLPos=0;
         encoderRPos=0;
    TurnbotMain(B[Bid].turn);
    Bid++;  
  }
  else if   (BType=="L"||BType=="R")
  {
    if(BType=="R")
         {
          SetDrivPinHalt();
         delay(300);     //2000
         Serial3.print("navin r");
         encoderLPos=0;
         encoderRPos=0;
          nextTurn="r";
          TurnbotMain(nextTurn);
        }
         else if(BType=="L")
         {
          SetDrivPinHalt();
         delay(300);          //2000
         Serial3.print("navin l");
         encoderLPos=0;
         encoderRPos=0;
          nextTurn="l";
          TurnbotMain(nextTurn);
         }
  }else if(BType=="E")
  {
    match=0;
    Serial3.println("Over");
    blinkLED(0,0,1,2000);
    blinkLED(1,1,1,6);
    }
 
}
 
  }
   
}
String checkforJ()
{
  err=0;
cnt=0;
  struct paths pd1,pd2,pd3;

  EmergStop=0;
  pd1=findBranch();
  bool LC=0;
  bool RC=0;
  bool FC=0;
   
  Juncn=0;
    if(pd1.V>1||pd1.maxT>4||((!(((PF>>5)&7)|(PK&7)))))
   {
 

    digitalWrite(13,HIGH);  
    analogWrite(ENl,speed2);
    analogWrite(ENr,speed2);
    SetDrivPinFRONT();
    while(1)
    {
     
      pd1=findBranch();
      if (pd1.PF&B00000111)
      {
        RC=1;
        }
      if (pd1.PK&B11100000)
      {
        LC=1;
        }

      if (pd1.V==0||(pd1.V==1&&pd1.maxT<=4 &&(pd1.PK&B00000011||pd1.PF&B11000000))&&(LC||RC)||(pd1.V==1&&pd1.maxT>12))
      {
 
                      
        BraketheBot();
        break;
        }
     
      }
      if((pd1.V==1&&pd1.maxT<=4 &&(pd1.PK&B00000011||pd1.PF&B11000000)))
        {
          FC=1;
        }

       String BType=JunctionName[FC][LC][RC];
    
      if((pd1.V==1&&pd1.maxT>12))
      {
        BType="E";
        blinkLED(1,1,1,3000);
        blinkLED(1,1,1,3);
        blinkLED(1,1,1,3000);
      }
     
      else if(BType=='R'||BType=='L'||BType=='S')
      {
        Juncn=0;        
        }
        else if(BType=='A'||BType=='B'||BType=='C'||BType=='D'||BType=='U')
        {
          Juncn=1;
        }
       return BType;
       blinkLED(LC,FC,RC,2000);
     
           
    }
  else if(!Juncn)
    {
       digitalWrite(13,LOW);
       int PK=~(PINK|B10000000);
       int PF=~(PINF|B00000001);      
      for(int i=0;i<8;i++)
        {
         
        err=err+wtgR[i]*((PF>>i)&1)+ wtgL[i]*((PK>>i)&1);
        cnt=cnt+((PF>>i)&1)+ ((PK>>i)&1);  
        }
       
      if(cnt)        
          {
            if((err/cnt)<(-4))
            {
              RSLS();
              }
              else if((err/cnt)>4)
              {
                LSRS();
              }
              else if(err!=0)
              {
                
                  analogWrite(ENl,speed4-(err/cnt)*10);                                                                                                                        
                  analogWrite(ENr,speed4+(err/cnt)*10);
                  SetDrivPinFRONT();
                  if (EmergStop==1)
                  {
                    delay(50);
                  }
              }
              else
              {
              
                analogWrite(ENl,speed2);                                                                                                                        
                analogWrite(ENr,speed2);
                SetDrivPinFRONT();
              }
           
          }
       else
          {
          BraketheBot();
          SetDrivPinFRONT();
               
          }
          return "X";
    }

  }

int STtime=80;
void RSLS()
{

  BraketheBot();
    delay(100);        //1000
  brk=0;
   TurnR();
   SetDrivPinFRONT();
    while(((~(PINK|B10000000)>>0)&1)==0)
   {
    delay(5);
    }
    BraketheBot();
    delay(100);      //1000
   
  }
  void LSRS()
{
  BraketheBot();
    delay(100);     //1000
   brk=0;
   TurnL();
   SetDrivPinFRONT();

   while(((~(PINF|B00000001)>>7)&1)==0)
   {
    delay(5);
    }  

   BraketheBot();
   delay(100);        //1000
  }

  void TurnL()
  {
    analogWrite(ENl,0);
    analogWrite(ENr,80);    
    }
    void TurnR()
  {
    analogWrite(ENr,0);
    analogWrite(ENl,80);    
    }
    void MoveF()
  {
    analogWrite(ENr,speed1);
    analogWrite(ENl,speed1);    


    }

void BraketheBot()
{

  if( brk=0)
  {
     
    for(int i=0;i<=10;i++)
    {
    SetDrivPinBACK();
    analogWrite(ENl,255);                                                                                                                        
     analogWrite(ENr,255);
 
    delay(5);
 

    SetDrivPinHalt();
    delay(10);
    }

  }
  analogWrite(ENl,0);  //PE3                                                                                                                      
  analogWrite(ENr,0);  //PB4
  brk=1;
}



void AlignTheBot()
{
       int PK=~(PINK|B10000000);
       int PF=~(PINF|B00000001);      
      for(int i=0;i<8;i++)
        {
         
        err=err+wtgR[i]*((PF>>i)&1)+ wtgL[i]*((PK>>i)&1);
        cnt=cnt+((PF>>i)&1)+ ((PK>>i)&1);  
        }

  if((err/cnt)<0)
  {
    RSLS();
    }
    else if((err/cnt)>0)
    {
      LSRS();
    }
 
  }

struct paths findBranch()
{
 

  struct paths myp;
  int v=0;
  int maxT=0,T=0;
  int prev=0;
  int wtg=0;
  int ctr[3]={0,0,0};
  PK=~(PINK|B10000000);
  PF=~(PINF|B00000001);
  for(int i=0;i<16;i++)
    {
    if (i<8)
      {
      
           if ((PF>>i)&1)
                 {
                 
                 if ((PF>>i)&1!=prev)
                 {
                    v++;
                    if(T>maxT)
                      maxT=T;
                    T=0;
                    wtg=0;
                 }
                 wtg=wtg+i;
                 T++;  
                 //lable[i]=v;
                 
                 }
                 else if(v)
                 {
                  ctr[v-1]=wtg/T;
                  }                
                  prev=((PF>>i)&1);
        }
     else
        {

            if ((PK>>(i-8))&1)
                   {
                   
                   if ((PK>>(i-8))&1!=prev)
                   {
                      v++;
                      if(T>maxT)
                        maxT=T;
                      T=0;
                      wtg=0;
                   }
                   wtg=wtg+i;
                   T++;  
                   //lable[i]=v;
                   
                   }
                   else if(v)
                 {
                  ctr[v-1]=wtg/T;
                  }
                   
                    prev=((PK>>(i-8))&1);
           
         }
   
   }
   if(T>maxT)
    {
      maxT=T;
    }
   myp.V=v;
   myp.C0=ctr[0];
   myp.C1=ctr[1];
   myp.C2=ctr[2];
   myp.maxT=maxT;
   myp.PF=PF;
   myp.PK=PK;
  return myp;
 
  }

  void SetDrivPinFRONT()
  {
    PORTH =(PORTH&B10110111)|B00110000;
    brk=0;
    //digitalWrite(LM1, HIGH);   7--H4                                                                                                                  
     //digitalWrite(LM2, LOW);    6--H3                                                                                                            
     //digitalWrite(RM1, HIGH);   8--H5                                                                                                            
    // digitalWrite(RM2, LOW);    9--H6
    }
void SetDrivPinBACK()
  {
    PORTH =(PORTH&B11001111)|B01001000;
    //analogWrite(ENl,250);                                                                                                                        
  //analogWrite(ENr,250);
//  digitalWrite(LM1, LOW);                                                                                                                    
//  digitalWrite(LM2, HIGH);                                                                                                                    
//  digitalWrite(RM1, LOW);                                                                                                                    
//  digitalWrite(RM2, HIGH);
    }
  void SetDrivPinHalt()
  {
    PORTH =(PORTH&B10000111);
//  digitalWrite(LM1, LOW);                                                                                                                    
//  digitalWrite(LM2, HIGH);                                                                                                                    
//  digitalWrite(RM1, LOW);                                                                                                                    
//  digitalWrite(RM2, HIGH);
    }
     void SetDrivPinLeft()
  {
     PORTH =(PORTH&B10101111)|B00101000;
//  digitalWrite(LM1, LOW);                                                                                                                    
//  digitalWrite(LM2, HIGH);                                                                                                                    
//  digitalWrite(RM1, HIGH);                                                                                                                    
//  digitalWrite(RM2, LOW);
    }
     void SetDrivPinRight()
  {
     PORTH =(PORTH&B11010111)|B01010000;
//  digitalWrite(LM1, HIGH);                                                                                                                    
//  digitalWrite(LM2, LOW);                                                                                                                    
//  digitalWrite(RM1, LOW);                                                                                                                    
//  digitalWrite(RM2, HIGH);
    }
void blinkLED(bool F,bool S, bool T,int times)
{
  digitalWrite(L1-1, LOW);
  digitalWrite(L2-1, LOW);
  digitalWrite(L3-1, LOW);

 
  if(times<20)
  {
    for(int i=0;i<times;i++)
      {                                                                                                                    
      digitalWrite(L1, F);
      digitalWrite(L2, S);
      digitalWrite(L3, T);
      delay(50);
      digitalWrite(L1, LOW);
      digitalWrite(L2, LOW);
      digitalWrite(L3, LOW);
      delay(100);
      }
   
    }
    else
    {
      digitalWrite(L1, F);
      digitalWrite(L2, S);
      digitalWrite(L3, T);
      delay(times);
      digitalWrite(L1, LOW);
      digitalWrite(L2, LOW);
      digitalWrite(L3, LOW);    
      }
 
  }

  void nintyR()
{
 Serial3.println("major right correction");
while(encoderLPos<=450 && encoderRPos>=-450) //500
{
SetDrivPinRight();
analogWrite(ENl,speed2);
analogWrite(ENr,speed2);
}
 SetDrivPinHalt();
// analogWrite(ENl,255);
// analogWrite(ENr,255);
 //delay(500);
  while(1)
  {
  int t1=encoderLPos;
  int t2=encoderRPos;
  delay(50);
 if( t1==encoderLPos &&  t2==encoderRPos)
 {
  encoderLPos=0;
  encoderRPos=0;
  break;
  }
  }
}
void nintyL()
{
  Serial3.print(encoderLPos);
  Serial3.print("     ");
  Serial3.print(encoderRPos);
while(encoderLPos>=-450 && encoderRPos<=450)  //500
{
  //Serial3.print("ser in");
SetDrivPinLeft();
analogWrite(ENl,speed2);
analogWrite(ENr,speed2);
}
 SetDrivPinHalt();
 //delay(500);
  while(1)
  {
  int t1=encoderLPos;
  int t2=encoderRPos;
  delay(50);
 if( t1==encoderLPos &&  t2==encoderRPos)
 {
  encoderLPos=0;
  encoderRPos=0;
  break;
  }
  }
}
void one_eighty()
{
while(encoderLPos<=1100 && encoderRPos>=-1100)  //1250
{
SetDrivPinRight();
analogWrite(ENl,speed2);
analogWrite(ENr,speed2);
}
 SetDrivPinHalt();
 //delay(500);
 while(1)
 {
  int t1=encoderLPos;
  int t2=encoderRPos;
  delay(50);
 if( t1==encoderLPos &&  t2==encoderRPos)
 {
  encoderLPos=0;
  encoderRPos=0;
  break;
 }
 }}

void doencoderRA() {

switch ((PIND>>2)&B11) {
  case 11:
    --encoderRPos ;
    break;
  case 10:
    ++encoderRPos;
    break;
  case 01:
   ++encoderRPos;
    break;
  case 00:
    --encoderRPos;
    break;

}
}


  void doencoderRB() {
   
switch ((PIND>>2)&B11) {
  case 11:
    ++encoderRPos ;
    break;
  case 10:
    --encoderRPos ;
    break;
  case 01:
    --encoderRPos ;
    break;
  case 00:
    ++encoderRPos;
    break;
}

}



void doencoderLA() {

switch (PIND&B11) {
  case 11:
    ++encoderLPos ;
    break;
  case 10:
    --encoderLPos;
    break;
  case 01:
   --encoderLPos;
    break;
  case 00:
    ++encoderLPos;
    break;

}
}



 



  void doencoderLB() {
//  Serial3.println ("Interupted");

switch (PIND&B11) {
  case 11:
    --encoderLPos ;
    break;
  case 10:
    ++encoderLPos ;
    break;
  case 01:
    ++encoderLPos ;
    break;
  case 00:
    --encoderLPos;
    break;
}

}


void s(){

 digitalWrite(LM2,HIGH);
 digitalWrite(LM1,HIGH);
 digitalWrite(RM1,HIGH);
 digitalWrite(RM2,HIGH);
}


void rotateR(){

 digitalWrite(LM2,LOW);
 digitalWrite(LM1,HIGH);
 digitalWrite(RM1,LOW);
 digitalWrite(RM2,HIGH);
}
void rotateL(){

 digitalWrite(LM2,HIGH);
 digitalWrite(LM1,LOW);
 digitalWrite(RM1,HIGH);
 digitalWrite(RM2,LOW);
}

void TurnbotMain(String nextTurn)
{
  if(nextTurn=="r"){
        encoderLPos=0;
        encoderRPos=0;
             
         //Serial3.print("right ninty degree");
          nintyR();
          AlignTheBot();
  //         Serial3.print(encoderLPos);
  //         Serial3.print("   ");
  //         Serial3.println(encoderRPos);
          Serial3.print("right ninty degree");
        }
       else if(nextTurn=="l"){
        encoderLPos=0;
        encoderRPos=0;
        //delay(100);
        //Serial3.print("left ninty degree");
          nintyL();
          AlignTheBot();
  //         Serial3.print(encoderLPos);
  //         Serial3.print("   ");
  //         Serial3.println(encoderRPos);
          Serial3.print("left ninty degree");
       }
       else if(nextTurn=="u"){
          analogWrite(ENl,speed2);                                                                                                                        
          analogWrite(ENr,speed2);
          SetDrivPinFRONT();
          delay(350);
          encoderLPos=0;
          encoderRPos=0;
          SetDrivPinHalt();
          delay(50);
          encoderLPos=0;
          encoderRPos=0;
          one_eighty();
          AlignTheBot();
          analogWrite(ENl,speed2);                                                                                                                        
          analogWrite(ENr,speed2);
          SetDrivPinFRONT();
          delay(150);
          AlignTheBot();
  //         Serial3.print(encoderLPos);
  //         Serial3.print("   ");
  //         Serial3.println(encoderRPos);
          Serial3.print("right one_eighty degree");
       }
         else if(nextTurn=="s"){
        encoderLPos=0;
        encoderRPos=0;
       }
 
 
  }
